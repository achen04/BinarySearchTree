Checking all files:                                                                                                                                                     
    main.cpp (2230 bytes)                                                                                                                                               
    BinarySearchTree.cpp (10205 bytes)                                                                                                                                  
    BinarySearchTree.h (4522 bytes)                                                                                                                                     
    pretty_print.cpp (5076 bytes)                                                                                                                                       
    ReadMe.md (2658 bytes)                                                                                                                                              
    Makefile (561 bytes)                                                                                                                                                
Total size of files is 25252 bytes.                                                                                                                                     
This is submission 1 of assignment hw4 in class 'comp15'.                                                                                                               

Are you ready to provide these for testing (yes or no)? yes

    copying file 'main.cpp'                                                                                                                                             
    copying file 'BinarySearchTree.cpp'                                                                                                                                 
    copying file 'BinarySearchTree.h'                                                                                                                                   
    copying file 'pretty_print.cpp'                                                                                                                                     
    copying file 'ReadMe.md'                                                                                                                                            
    copying file 'Makefile'                                                                                                                                             
Preparing for testing...                                                                                                                                                

//@@ ======== SUBMISSION SCREENING START ========
//@@ achen04 submitting from /dev/pts/2 on lab118o
//@@                       at 2016-03-14 21:04:48 

2 : Checking for valid userid...





This is submission 1.
Your maximum number of submissions for hw4 is 5.


Your homework is on time. Nice work.

  8: Checking required files
     OK        main.cpp     
     OK        pretty_print.cpp
     OK        BinarySearchTree.cpp
     OK        BinarySearchTree.h  
     OK        ReadMe.md           
     OK        Makefile            

  9: Checking if files are correct type
     OK        BinarySearchTree.cpp    
     OK        main.cpp                
     OK        pretty_print.cpp        

Checking Files...
Making program via Makefile
No errors!                 
No warnings!               

"Running tests. This might take a while. Please be patient..."

********** Testing main32.cpp **********
// Test: original main from assignment  
main32.cpp Passed!                      
Running valgrind to check for memory leaks.
valgrind reported errors!                  
//---------- test program code: main32.cpp ----------
// Test: original main from assignment               
/*                                                   
 * main32.cpp                                        
 *                                                   
 *  Created on: Oct 13, 2014                         
 *      Author: chrisgregg                           
 */                                                  

#include <iostream>
#include "BinarySearchTree.h"

using namespace std;

void print_tree_details(BinarySearchTree &bst) {
        bst.print_tree();                       
        cout << "\n";                           
        cout << "min: " << bst.find_min() << "\n";
        cout << "max: " << bst.find_max() << "\n";
        cout << "nodes: " << bst.node_count() << "\n";
        cout << "count total: " << bst.count_total() << "\n";
        cout << "tree height: " << bst.tree_height() << "\n";
        cout << "\n";                                        
}                                                            

int main() {
        int values[14] = {4, 2, 11, 15, 9, 1, -6, 5, 3, 15, 2, 5, 13, 14};
        BinarySearchTree bst;                                             
        for (int i = 0; i < 14; i++) {                                    
                cout << "Inserting " << values[i] << " into the tree.\n"; 
                bst.insert(values[i]);                                    
        }                                                                 
        cout << "Original tree " <<                                       
                        "(asterisks denote a count of more than 1):\n";   
        print_tree_details(bst);                                          

        // make a copy with copy constructor
        BinarySearchTree bst_copy_constructor = bst;
        //bst_copy_constructor.print_tree();        

        // make a copy with assignment overload
        BinarySearchTree bst_copy_1;           
        bst_copy_1 = bst;                      

        cout << "Removing 9 from original tree:\n";
        bst.remove(9); // remove a node with one child
        print_tree_details(bst);                      

        bst = bst_copy_1;

        cout << "Removing 1 from original tree:\n";
        bst.remove(1); // remove a node with one child
        print_tree_details(bst);                      

        bst = bst_copy_1;

        cout << "Removing 11 from original tree:\n";
        bst.remove(11); // remove a node with one child
        print_tree_details(bst);                       

        bst = bst_copy_1;

        cout << "Removing 5 from original tree " <<
                        "(should still have one 5):\n";
        bst.remove(5); // remove a node with one child 
        print_tree_details(bst);                       

        // check if the tree contains values
        bst = bst_copy_1;                   
        for (int i=-10;i<20;i++) {          
                cout << "Tree " << (bst.contains(i) ?
                                "contains " :        
                                "does not contain ") 
                                << "the value " << i << "\n";
        }                                                    

        cout << "\nFinished!\n";
        return 0;               
}                               
//---------- end test program code ----------

==9946== Memcheck, a memory error detector
==9946== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==9946== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==9946== Command: ./hw4                                                    
==9946==                                                                   
Inserting 4 into the tree.                                                 
Inserting 2 into the tree.                                                 
Inserting 11 into the tree.                                                
Inserting 15 into the tree.                                                
Inserting 9 into the tree.                                                 
Inserting 1 into the tree.                                                 
Inserting -6 into the tree.                                                
Inserting 5 into the tree.                                                 
Inserting 3 into the tree.                                                 
Inserting 15 into the tree.                                                
Inserting 2 into the tree.                                                 
Inserting 5 into the tree.                                                 
Inserting 13 into the tree.                                                
Inserting 14 into the tree.                                                
Original tree (asterisks denote a count of more than 1):                   

                _______________4______________
               /                              \
        _______2*______                  ______11______
       /              \                /              \
    ___1               3            ___9            __15*  
   /                               /               /       
  -6                               5*              13        
                                                    \        
                                                    14        

min: -6
max: 15
nodes: 11
count total: 93
tree height: 4 

Removing 9 from original tree:

                _______________4______________
               /                              \
        _______2*______                  ______11______
       /              \                /              \
    ___1               3               5*            __15*  
   /                                               /        
  -6                                              13        
                                                    \        
                                                    14        

min: -6
max: 15
nodes: 10
count total: 84
tree height: 4 

Removing 1 from original tree:

                _______________4______________
               /                              \
        _______2*______                  ______11______
       /              \                /              \
      -6               3            ___9            __15*  
                                   /               /       
                                   5*              13        
                                                    \        
                                                    14        

min: -6
max: 15
nodes: 10
count total: 92
tree height: 4 

Removing 11 from original tree:

        _______4______
       /              \
    ___2*__          __13__
   /      \        /      \
  _1       3      _9      15*
 /               /       /   
-6               5*      14    

min: -6
max: 15
nodes: 10
count total: 82
tree height: 3 

Removing 5 from original tree (should still have one 5):

                _______________4______________
               /                              \
        _______2*______                  ______11______
       /              \                /              \
    ___1               3            ___9            __15*  
   /                               /               /       
  -6                               5              13        
                                                    \        
                                                    14        

min: -6
max: 15
nodes: 11
count total: 88
tree height: 4 

Tree does not contain the value -10
Tree does not contain the value -9 
Tree does not contain the value -8 
Tree does not contain the value -7 
Tree contains the value -6         
Tree does not contain the value -5 
Tree does not contain the value -4 
Tree does not contain the value -3 
Tree does not contain the value -2 
Tree does not contain the value -1 
Tree does not contain the value 0  
Tree contains the value 1          
Tree contains the value 2          
Tree contains the value 3          
Tree contains the value 4          
Tree contains the value 5          
Tree does not contain the value 6  
Tree does not contain the value 7  
Tree does not contain the value 8  
Tree contains the value 9          
Tree does not contain the value 10 
Tree contains the value 11         
Tree does not contain the value 12 
Tree contains the value 13         
Tree contains the value 14         
Tree contains the value 15         
Tree does not contain the value 16 
Tree does not contain the value 17 
Tree does not contain the value 18 
Tree does not contain the value 19 

Finished!
==9946== 
==9946== HEAP SUMMARY:
==9946==     in use at exit: 72 bytes in 3 blocks
==9946==   total heap usage: 191 allocs, 188 frees, 34,028 bytes allocated
==9946==                                                                  
==9946== LEAK SUMMARY:                                                    
==9946==    definitely lost: 72 bytes in 3 blocks                         
==9946==    indirectly lost: 0 bytes in 0 blocks                          
==9946==      possibly lost: 0 bytes in 0 blocks                          
==9946==    still reachable: 0 bytes in 0 blocks                          
==9946==         suppressed: 0 bytes in 0 blocks                          
==9946== Rerun with --leak-check=full to see details of leaked memory     
==9946==                                                                  
==9946== For counts of detected and suppressed errors, rerun with: -v     
==9946== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 5 from 5)   
********** Done Testing main32.cpp **********                             


********** Testing main1.cpp **********
// Test: Inserts a single value to the tree and prints
main1.cpp Passed!                                     
Running valgrind to check for memory leaks.           
No memory leaks!                                      
********** Done Testing main1.cpp **********          


********** Testing main2.cpp **********
// Test: Inserts 4,5,6 into a tree and prints
main2.cpp Passed!                            
Running valgrind to check for memory leaks.  
No memory leaks!                             
********** Done Testing main2.cpp ********** 


********** Testing main5.cpp **********
// Test: find_min(): Inserts 5,3,6,4,7,2 into a tree, prints tree and minimum
main5.cpp Passed!                                                            
Running valgrind to check for memory leaks.                                  
No memory leaks!                                                             
********** Done Testing main5.cpp **********                                 


********** Testing main8.cpp **********
// Test: max and min on empty tree: Creates empty tree, prints min/max.
main8.cpp Passed!                                                      
Running valgrind to check for memory leaks.                            
No memory leaks!                                                       
********** Done Testing main8.cpp **********                           


********** Testing main10.cpp **********
// Test: tree_height(): Prints height of empty tree (should be negative 1)
main10.cpp Passed!                                                        
Running valgrind to check for memory leaks.                               
No memory leaks!                                                          
********** Done Testing main10.cpp **********                             


********** Testing main11.cpp **********
// Test: find_min() on 100 random int tree (should be -99)
main11.cpp Passed!                                        
Running valgrind to check for memory leaks.               
No memory leaks!                                          
********** Done Testing main11.cpp **********             


********** Testing main13.cpp **********
// Test: node_count() of 100 random int tree (should be 71)
main13.cpp Passed!                                         
Running valgrind to check for memory leaks.                
No memory leaks!                                           
********** Done Testing main13.cpp **********              


********** Testing main15.cpp **********
// Test: count_total(): inserts 5,3,6,4 into tree, prints tree and count_total()
main15.cpp Passed!                                                              
Running valgrind to check for memory leaks.                                     
No memory leaks!                                                                
********** Done Testing main15.cpp **********                                   


********** Testing main17.cpp **********
// Test: remove childless node: inserts ten items prints tree, removes one
main17.cpp Passed!                                                        
Running valgrind to check for memory leaks.                               
valgrind reported errors!                                                 
//---------- test program code: main17.cpp ----------                     
// Test: remove childless node: inserts ten items prints tree, removes one
/*                                                                        
 * main17.cpp                                                             
 *                                                                        
 *  Created on: Oct. 14, 2014                                             
 *      Author: chrisgregg                                                
 */                                                                       
#include <iostream>                                                       
#include "BinarySearchTree.h"                                             

using namespace std;

int main() {
        int rand_ints[12]={5,3,6,11,-5,-2,15,4,4,9,14,8};

        BinarySearchTree bst;
        for (int i=0;i<12;i++) {
                cout << "Inserting " << rand_ints[i] << "\n";
                bst.insert(rand_ints[i]);                    
        }                                                    
        bst.print_tree();                                    
        cout << "Removing 8.\n";                             
        bst.remove(8);                                       
        bst.print_tree();                                    

        return 0;
}                

//---------- end test program code ----------

==10620== Memcheck, a memory error detector
==10620== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==10620== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==10620== Command: ./hw4                                                    
==10620==                                                                   
Inserting 5                                                                 
Inserting 3                                                                 
Inserting 6                                                                 
Inserting 11                                                                
Inserting -5                                                                
Inserting -2                                                                
Inserting 15                                                                
Inserting 4                                                                 
Inserting 4                                                                 
Inserting 9                                                                 
Inserting 14                                                                
Inserting 8                                                                 

                _______________5______________
               /                              \
        _______3______                         6______
       /              \                               \
      -5__             4*                            __11__
          \                                        /      \
          -2                                      _9      15
                                                 /       /   
                                                 8      14    
Removing 8.                                                   

                _______________5______________
               /                              \
        _______3______                         6______
       /              \                               \
      -5__             4*                            __11__
          \                                        /      \
          -2                                       9      15
                                                         /   
                                                        14    
==10620==                                                     
==10620== HEAP SUMMARY:                                       
==10620==     in use at exit: 24 bytes in 1 blocks            
==10620==   total heap usage: 57 allocs, 56 frees, 13,249 bytes allocated
==10620==                                                                
==10620== LEAK SUMMARY:                                                  
==10620==    definitely lost: 24 bytes in 1 blocks                       
==10620==    indirectly lost: 0 bytes in 0 blocks                        
==10620==      possibly lost: 0 bytes in 0 blocks                        
==10620==    still reachable: 0 bytes in 0 blocks                        
==10620==         suppressed: 0 bytes in 0 blocks                        
==10620== Rerun with --leak-check=full to see details of leaked memory   
==10620==                                                                
==10620== For counts of detected and suppressed errors, rerun with: -v   
==10620== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 5 from 5) 
********** Done Testing main17.cpp **********                            


********** Testing main19.cpp **********
// Test: remove two-child node: inserts ten items prints tree, removes one
main19.cpp Passed!                                                        
Running valgrind to check for memory leaks.                               
valgrind reported errors!                                                 
//---------- test program code: main19.cpp ----------                     
// Test: remove two-child node: inserts ten items prints tree, removes one
/*                                                                        
 * main19.cpp                                                             
 *                                                                        
 *  Created on: Oct. 14, 2014                                             
 *      Author: chrisgregg                                                
 */                                                                       
#include <iostream>                                                       
#include "BinarySearchTree.h"                                             

using namespace std;

int main() {
        int rand_ints[12]={5,3,6,11,-5,-2,15,4,4,9,14,8};

        BinarySearchTree bst;
        for (int i=0;i<12;i++) {
                cout << "Inserting " << rand_ints[i] << "\n";
                bst.insert(rand_ints[i]);                    
        }                                                    
        bst.print_tree();                                    
        cout << "Removing 5.\n";                             
        bst.remove(5);                                       
        bst.print_tree();                                    

        return 0;
}                

//---------- end test program code ----------

==10700== Memcheck, a memory error detector
==10700== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==10700== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==10700== Command: ./hw4                                                    
==10700==                                                                   
Inserting 5                                                                 
Inserting 3                                                                 
Inserting 6                                                                 
Inserting 11                                                                
Inserting -5                                                                
Inserting -2                                                                
Inserting 15                                                                
Inserting 4                                                                 
Inserting 4                                                                 
Inserting 9                                                                 
Inserting 14                                                                
Inserting 8                                                                 

                _______________5______________
               /                              \
        _______3______                         6______
       /              \                               \
      -5__             4*                            __11__
          \                                        /      \
          -2                                      _9      15
                                                 /       /   
                                                 8      14    
Removing 5.                                                   

        _______6______
       /              \
    ___3__          __11__
   /      \        /      \
  -5       4*      _9      15
    \            /       /   
    -2           8      14    
==10700==                     
==10700== HEAP SUMMARY:       
==10700==     in use at exit: 24 bytes in 1 blocks
==10700==   total heap usage: 57 allocs, 56 frees, 13,249 bytes allocated
==10700==                                                                
==10700== LEAK SUMMARY:                                                  
==10700==    definitely lost: 24 bytes in 1 blocks                       
==10700==    indirectly lost: 0 bytes in 0 blocks                        
==10700==      possibly lost: 0 bytes in 0 blocks                        
==10700==    still reachable: 0 bytes in 0 blocks                        
==10700==         suppressed: 0 bytes in 0 blocks                        
==10700== Rerun with --leak-check=full to see details of leaked memory   
==10700==                                                                
==10700== For counts of detected and suppressed errors, rerun with: -v   
==10700== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 5 from 5) 
********** Done Testing main19.cpp **********                            


********** Testing main22.cpp **********
// Test: remove root when root has no children
main22.cpp Failed!                            
//---------- test program code: main22.cpp ----------
// Test: remove root when root has no children       
/*                                                   
 * main22.cpp                                        
 *                                                   
 *  Created on: Oct. 19, 2014                        
 *      Author: chrisgregg                           
 */                                                  
#include <iostream>                                  
#include "BinarySearchTree.h"                        

using namespace std;

int main() {
        BinarySearchTree bst;

        bst.insert(12);
        bst.print_tree();
        cout << "Removing 12.\n";
        bst.remove(12);          
        bst.print_tree();        

        return 0;
}                


//---------- end test program code ----------

//---------- Expected output for main22.cpp (first 8000 characters): 

12
Removing 12.

  
//---------- End of expected output for main22.cpp.

//---------- Your output for main22.cpp (first 8000 characters): 

12
GOT SIGNAL 11 ./hw4
//---------- End of your output for main22.cpp.
(I'm not sure what type of error it was.       
You can check http://goo.gl/reLHm8 and see what
Unix Signal -117 stands for)                   

//---------- diff for main22.cpp (first 8000 characters): 
3,5c3                                                     
< Removing 12.                                            
<                                                         
<                                                         
---                                                       
> GOT SIGNAL 11 ./hw4                                     
//---------- End of diff for main22.cpp.                  
Running valgrind to check for memory leaks.               
valgrind reported errors!                                 
==10805== Memcheck, a memory error detector               
==10805== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==10805== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==10805== Command: ./hw4                                                    
==10805==                                                                   

12
==10805== Invalid read of size 8
==10805==    at 0x401A13: BinarySearchTree::remove(Node*, Node*, int) (BinarySearchTree.cpp:283)
==10805==    by 0x401871: BinarySearchTree::remove(int) (BinarySearchTree.cpp:236)              
==10805==    by 0x4011C9: main (main22.cpp:19)                                                  
==10805==  Address 0x10 is not stack'd, malloc'd or (recently) free'd                           
==10805==                                                                                       
==10805==                                                                                       
==10805== Process terminating with default action of signal 11 (SIGSEGV)                        
==10805==  Access not within mapped region at address 0x10                                      
==10805==    at 0x401A13: BinarySearchTree::remove(Node*, Node*, int) (BinarySearchTree.cpp:283)
==10805==    by 0x401871: BinarySearchTree::remove(int) (BinarySearchTree.cpp:236)              
==10805==    by 0x4011C9: main (main22.cpp:19)                                                  
==10805==  If you believe this happened as a result of a stack                                  
==10805==  overflow in your program's main thread (unlikely but                                 
==10805==  possible), you can try to increase the size of the                                   
==10805==  main thread stack using the --main-stacksize= flag.                                  
==10805==  The main thread stack size used in this run was 10485760.                            
Removing 12.                                                                                    
==10805==                                                                                       
==10805== HEAP SUMMARY:                                                                         
==10805==     in use at exit: 24 bytes in 1 blocks                                              
==10805==   total heap usage: 5 allocs, 4 frees, 1,164 bytes allocated                          
==10805==                                                                                       
==10805== LEAK SUMMARY:                                                                         
==10805==    definitely lost: 0 bytes in 0 blocks                                               
==10805==    indirectly lost: 0 bytes in 0 blocks                                               
==10805==      possibly lost: 0 bytes in 0 blocks                                               
==10805==    still reachable: 24 bytes in 1 blocks                                              
==10805==         suppressed: 0 bytes in 0 blocks                                               
==10805== Rerun with --leak-check=full to see details of leaked memory                          
==10805==                                                                                       
==10805== For counts of detected and suppressed errors, rerun with: -v                          
==10805== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 5 from 5)                        
GOT SIGNAL 11 valgrind                                                                          
********** Done Testing main22.cpp **********                                                   


********** Testing main24.cpp **********
// Test: remove root when root has two children
main24.cpp Passed!                             
Running valgrind to check for memory leaks.    
valgrind reported errors!                      
//---------- test program code: main24.cpp ----------
// Test: remove root when root has two children      
/*                                                   
 * main24.cpp                                        
 *                                                   
 *  Created on: Oct. 19, 2014                        
 *      Author: chrisgregg                           
 */                                                  
#include <iostream>                                  
#include "BinarySearchTree.h"                        

using namespace std;

int main() {
        BinarySearchTree bst;

        bst.insert(12);
        bst.insert(20);
        bst.insert(15);
        bst.insert(23);
        bst.insert(5); 
        bst.insert(6); 
        bst.insert(3); 
        bst.print_tree();
        cout << "Removing 12.\n";
        bst.remove(12);          
        bst.print_tree();        

        return 0;
}                


//---------- end test program code ----------

==10881== Memcheck, a memory error detector
==10881== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==10881== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==10881== Command: ./hw4                                                    
==10881==                                                                   

    __12__
   /      \
  _5      20
 /  \    /  \
 3   6  15  23
Removing 12.  

    __15__
   /      \
  _5      20
 /  \       \
 3   6      23
==10881==     
==10881== HEAP SUMMARY:
==10881==     in use at exit: 24 bytes in 1 blocks
==10881==   total heap usage: 37 allocs, 36 frees, 8,646 bytes allocated
==10881==                                                               
==10881== LEAK SUMMARY:                                                 
==10881==    definitely lost: 24 bytes in 1 blocks                      
==10881==    indirectly lost: 0 bytes in 0 blocks                       
==10881==      possibly lost: 0 bytes in 0 blocks                       
==10881==    still reachable: 0 bytes in 0 blocks                       
==10881==         suppressed: 0 bytes in 0 blocks                       
==10881== Rerun with --leak-check=full to see details of leaked memory  
==10881==                                                               
==10881== For counts of detected and suppressed errors, rerun with: -v  
==10881== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 5 from 5)
********** Done Testing main24.cpp **********                           


********** Testing main29.cpp **********
// Test: attempt to remove a node that doesn't exist in the tree
main29.cpp Passed!                                              
Running valgrind to check for memory leaks.                     
No memory leaks!                                                
********** Done Testing main29.cpp **********                   


********** Testing main30.cpp **********
// Test: copy constructor test          
main30.cpp Passed!                      
Running valgrind to check for memory leaks.
valgrind reported errors!                  
//---------- test program code: main30.cpp ----------
// Test: copy constructor test                       
/*  main30.cpp                                       
 *                                                   
 *  Created on: Oct. 19, 2014                        
 *      Author: chrisgregg                           
 */                                                  
#include <iostream>                                  
#include "BinarySearchTree.h"                        

using namespace std;

int main() {
        int rand_ints[4]={5,3,6,11};

        BinarySearchTree bst;
        for (int i=0;i<4;i++) {
                cout << "Inserting " << rand_ints[i] << "\n";
                bst.insert(rand_ints[i]);                    
        }                                                    
        BinarySearchTree bst2 = bst;                         

        bst.print_tree();
        bst2.print_tree();
        cout << "Removing 5 from bst, but not bst2.\n";
        bst.remove(5); // necessary to ensure that the trees
                        // aren't pointing at each other's data
        bst.print_tree();                                      
        bst2.print_tree(); // should be original               

        return 0;
}                

//---------- end test program code ----------

==11073== Memcheck, a memory error detector
==11073== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==11073== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==11073== Command: ./hw4                                                    
==11073==                                                                   
Inserting 5                                                                 
Inserting 3                                                                 
Inserting 6                                                                 
Inserting 11                                                                

    ___5__
   /      \
   3       6
            \
            11

    ___5__
   /      \
   3       6
            \
            11
Removing 5 from bst, but not bst2.

  _6
 /  \
 3  11

    ___5__
   /      \
   3       6
            \
            11
==11073==     
==11073== HEAP SUMMARY:
==11073==     in use at exit: 24 bytes in 1 blocks
==11073==   total heap usage: 46 allocs, 45 frees, 10,945 bytes allocated
==11073==                                                                
==11073== LEAK SUMMARY:                                                  
==11073==    definitely lost: 24 bytes in 1 blocks                       
==11073==    indirectly lost: 0 bytes in 0 blocks                        
==11073==      possibly lost: 0 bytes in 0 blocks                        
==11073==    still reachable: 0 bytes in 0 blocks                        
==11073==         suppressed: 0 bytes in 0 blocks                        
==11073== Rerun with --leak-check=full to see details of leaked memory   
==11073==                                                                
==11073== For counts of detected and suppressed errors, rerun with: -v   
==11073== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 5 from 5) 
********** Done Testing main30.cpp **********                            


********** Testing main31.cpp **********
// Test: assignment (=) overload        
main31.cpp Passed!                      
Running valgrind to check for memory leaks.
valgrind reported errors!                  
//---------- test program code: main31.cpp ----------
// Test: assignment (=) overload                     
/*  main31.cpp                                       
 *                                                   
 *  Created on: Oct. 19, 2014                        
 *      Author: chrisgregg                           
 */                                                  
#include <iostream>                                  
#include "BinarySearchTree.h"                        

using namespace std;

int main() {
        int rand_ints[4]={5,3,6,11};

        BinarySearchTree bst,bst2;
        for (int i=0;i<4;i++) {   
                cout << "Inserting " << rand_ints[i] << "\n";
                bst.insert(rand_ints[i]);                    
        }                                                    
        bst2 = bst;                                          

        bst.print_tree();
        bst2.print_tree();
        cout << "Removing 5 from bst, but not bst2.\n";
        bst.remove(5); // necessary to ensure that the trees
                        // aren't pointing at each other's data
        bst.print_tree();                                      
        bst2.print_tree(); // should be original               

        return 0;
}                

//---------- end test program code ----------

==11131== Memcheck, a memory error detector
==11131== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==11131== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==11131== Command: ./hw4                                                    
==11131==                                                                   
Inserting 5                                                                 
Inserting 3                                                                 
Inserting 6                                                                 
Inserting 11                                                                

    ___5__
   /      \
   3       6
            \
            11

    ___5__
   /      \
   3       6
            \
            11
Removing 5 from bst, but not bst2.

  _6
 /  \
 3  11

    ___5__
   /      \
   3       6
            \
            11
==11131==
==11131== HEAP SUMMARY:
==11131==     in use at exit: 24 bytes in 1 blocks
==11131==   total heap usage: 46 allocs, 45 frees, 10,945 bytes allocated
==11131==
==11131== LEAK SUMMARY:
==11131==    definitely lost: 24 bytes in 1 blocks
==11131==    indirectly lost: 0 bytes in 0 blocks
==11131==      possibly lost: 0 bytes in 0 blocks
==11131==    still reachable: 0 bytes in 0 blocks
==11131==         suppressed: 0 bytes in 0 blocks
==11131== Rerun with --leak-check=full to see details of leaked memory
==11131==
==11131== For counts of detected and suppressed errors, rerun with: -v
==11131== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 5 from 5)
********** Done Testing main31.cpp **********


*/*/*/*/*/ Some of the tests failed! /*/*/*/*/*
Tests that failed:
valgrind(main32.cpp), valgrind(main17.cpp), valgrind(main19.cpp), main22.cpp, valgrind(main22.cpp), valgrind(main24.cpp), valgrind(main30.cpp), valgrind(main31.cpp),
